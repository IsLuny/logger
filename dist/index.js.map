{"version":3,"sources":["../src/index.ts","../src/logger-class.ts","../src/utils/color-utils.ts"],"sourcesContent":["export * from './logger-class'\n\nimport { LoggerConfig } from '..'\nimport { Logger } from './logger-class'\n\ntype LoggerLogFunction = (message: unknown, more?: { details?: string | object, tags?: string | string[], depth?: number }) => void\n\ntype LoggerMethods<T extends string> = Record<T, LoggerLogFunction>\n\nconst Resource: new <T extends string>(attr: LoggerConfig<T>) => Logger & LoggerMethods<T> = Logger as any\n\nexport const createLogger = <T extends string>(config: LoggerConfig<T>) => {\n\treturn new Resource<T>(config)\n}","import chalk from 'chalk'\nimport { inspect } from 'node:util'\n\nimport { ColorUtils } from './utils/color-utils'\nimport { LoggerColor, Optional } from './utils/typing'\nimport {\n\tLoggerPrintMessageFormatter,\n\tLoggerConfig,\n\tLoggerFormatOptions,\n\tLoggerLevel,\n\tLoggerLevelsConfig,\n\tLoggerPrintMessageFormatterData\n} from '../index.d'\n\nconst printf: LoggerPrintMessageFormatter = ({ label, badge, message }) => `${badge} ${label}: ${message}`\n\nexport class Logger {\n\tlevels: LoggerLevelsConfig\n\tformatOptions: LoggerFormatOptions\n\tdebugActived: boolean\n\t\n\tconstructor(config: LoggerConfig<string>) {\n\t\tfor(const [level, levelConfig] of Object.entries(config.levels)) {\n\t\t\t(this as any)[level] = this.makeLogger({ ...levelConfig, level })\n\t\t}\n\n\t\tthis.debugActived = config.debug ?? true\n\n\t\tthis.formatOptions = {\n\t\t\tcolorize: config.format?.colorize ?? {},\n\t\t\tfunction: config.format?.function ?? printf,\n\t\t}\n\t}\n\n\tprivate makeLogger(config: LoggerLevel & { level: string }) {\n\t\treturn (message: unknown, more?: LoggerPrintMessageFormatterData['more']) => {\n\t\t\tif(!(config.logLevel === 'debug' && !this.debugActived)) {\n\t\t\t\tthis._log(config, message, more)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _log({ level, ...config }: LoggerLevel & { level: string }, _message: unknown, more?: LoggerPrintMessageFormatterData['more']) {\n\t\tlet colorFn = (string: string) => string\n\n\t\tif(config.color) {\n\t\t\tif(ColorUtils.isHex(config.color)) {\n\t\t\t\tcolorFn = chalk.hex(config.color)\n\t\t\t} else {\n\t\t\t\tcolorFn = chalk[config.color as LoggerColor]\n\t\t\t}\n\t\t}\n\n\t\tconst commonBadge = config.badge || 'â—‰'\n\t\tconst badge = this.formatOptions.colorize.label ? colorFn(commonBadge) : commonBadge\n\t\t\n\t\tconst commonLabel = config.label ?? level\n\t\tconst label = this.formatOptions.colorize?.label ? colorFn(commonLabel) : commonLabel\n\n\t\tlet inspectedMessage = _message\n\t\t\n\t\tif(inspectedMessage instanceof Promise) {\n\t\t\tinspectedMessage = await inspectedMessage\n\t\t}\n\n\t\tif(typeof inspectedMessage !== 'string') {\n\t\t\tinspectedMessage = await inspect(inspectedMessage, { depth: more?.depth ?? 0 })\n\t\t}\n\n\t\tconst messageToPrint = this.formatOptions.function({\n\t\t\tbadge,\n\t\t\tlabel,\n\t\t\tlevel,\n\t\t\tmessage: inspectedMessage as string,\n\t\t\ttimestamp: new Date().toISOString(),\n\t\t\tmore,\n\t\t\tcolor: config.color,\n\t\t\tcommonLabel,\n\t\t})\n\n\t\tconsole.log(messageToPrint)\n\t}\n}","export type ColorHexComplex = `#${string}`;\n\nconst hexRegex = /^#[0-9A-F]{6}$/i\nconst hexWithTransparency = /^#[0-9A-F]{6}[0-9a-f]{0,2}$/i\n\nexport class ColorUtils {\n\tstatic isHex(string: string, supportTransparent: boolean = false) {\n\t\tconst regex = supportTransparent ? hexWithTransparency : hexRegex\n\n\t\treturn regex.test(string)\n\t}\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAkB;AAClB,uBAAwB;;;ACCxB,IAAM,WAAW;AACjB,IAAM,sBAAsB;AAErB,IAAM,aAAN,MAAiB;AAAA,EACvB,OAAO,MAAM,QAAgB,qBAA8B,OAAO;AACjE,UAAM,QAAQ,qBAAqB,sBAAsB;AAEzD,WAAO,MAAM,KAAK,MAAM;AAAA,EACzB;AACD;;;ADGA,IAAM,SAAsC,CAAC,EAAE,OAAO,OAAO,QAAQ,MAAM,GAAG,KAAK,IAAI,KAAK,KAAK,OAAO;AAEjG,IAAM,SAAN,MAAa;AAAA,EAKnB,YAAY,QAA8B;AACzC,eAAU,CAAC,OAAO,WAAW,KAAK,OAAO,QAAQ,OAAO,MAAM,GAAG;AAChE,MAAC,KAAa,KAAK,IAAI,KAAK,WAAW,EAAE,GAAG,aAAa,MAAM,CAAC;AAAA,IACjE;AAEA,SAAK,eAAe,OAAO,SAAS;AAEpC,SAAK,gBAAgB;AAAA,MACpB,UAAU,OAAO,QAAQ,YAAY,CAAC;AAAA,MACtC,UAAU,OAAO,QAAQ,YAAY;AAAA,IACtC;AAAA,EACD;AAAA,EAEQ,WAAW,QAAyC;AAC3D,WAAO,CAAC,SAAkB,SAAmD;AAC5E,UAAG,EAAE,OAAO,aAAa,WAAW,CAAC,KAAK,eAAe;AACxD,aAAK,KAAK,QAAQ,SAAS,IAAI;AAAA,MAChC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,KAAK,EAAE,OAAO,GAAG,OAAO,GAAoC,UAAmB,MAAgD;AAC5I,QAAI,UAAU,CAAC,WAAmB;AAElC,QAAG,OAAO,OAAO;AAChB,UAAG,WAAW,MAAM,OAAO,KAAK,GAAG;AAClC,kBAAU,aAAAA,QAAM,IAAI,OAAO,KAAK;AAAA,MACjC,OAAO;AACN,kBAAU,aAAAA,QAAM,OAAO,KAAoB;AAAA,MAC5C;AAAA,IACD;AAEA,UAAM,cAAc,OAAO,SAAS;AACpC,UAAM,QAAQ,KAAK,cAAc,SAAS,QAAQ,QAAQ,WAAW,IAAI;AAEzE,UAAM,cAAc,OAAO,SAAS;AACpC,UAAM,QAAQ,KAAK,cAAc,UAAU,QAAQ,QAAQ,WAAW,IAAI;AAE1E,QAAI,mBAAmB;AAEvB,QAAG,4BAA4B,SAAS;AACvC,yBAAmB,MAAM;AAAA,IAC1B;AAEA,QAAG,OAAO,qBAAqB,UAAU;AACxC,yBAAmB,UAAM,0BAAQ,kBAAkB,EAAE,OAAO,MAAM,SAAS,EAAE,CAAC;AAAA,IAC/E;AAEA,UAAM,iBAAiB,KAAK,cAAc,SAAS;AAAA,MAClD;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC;AAAA,MACA,OAAO,OAAO;AAAA,MACd;AAAA,IACD,CAAC;AAED,YAAQ,IAAI,cAAc;AAAA,EAC3B;AACD;;;ADzEA,IAAM,WAAuF;AAEtF,IAAM,eAAe,CAAmB,WAA4B;AAC1E,SAAO,IAAI,SAAY,MAAM;AAC9B;","names":["chalk"]}